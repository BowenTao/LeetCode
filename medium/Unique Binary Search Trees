/*Given n, how many structurally unique BST's (binary search trees) that store values 1...n?
*
*For example,
*Given n = 3, there are a total of 5 unique BST's.
*
*   1         3     3      2      1
*    \       /     /      / \      \
*     3     2     1      1   3      2
*    /     /       \                 \
*   2     1         2                 3
*/

public class Solution {
    public int numTrees(int n) {
      int sum=0,left=0,right=0;
		  if (n==0 || n==1){
			   return 1;
		  }else{
			   for (int i=1;i<=n;i++){
				  left=numTrees(i-1);
				  right=numTrees(n-i);
				  sum+=left*right;
			   }
		  }
		  return sum;
    }
    
    public int numTrees(int n) {
        int[] c=new int[n+1];
        c[0]=1;
        c[1]=1;
        for (int i=2;i<=n;i++){
        	for (int j=1;j<=i;j++){
        		c[i]+=c[j-1]*c[i-j];
        	}
        }
        return c[n];
    }
}
